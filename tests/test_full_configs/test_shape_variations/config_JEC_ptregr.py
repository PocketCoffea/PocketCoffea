# This config has been generated by the pocket_coffea CLI 0.9.4.
from pocket_coffea.utils.configurator import Configurator
from pocket_coffea.lib.cut_definition import Cut
from pocket_coffea.lib.cut_functions import (
    get_nObj_min,
    get_nObj_eq,
    get_HLTsel,
    get_nPVgood,
    goldenJson,
    eventFlags,
)
from pocket_coffea.parameters.cuts import passthrough
from pocket_coffea.parameters.histograms import *
from pocket_coffea.lib.categorization import (
    StandardSelection,
    CartesianSelection,
    MultiCut,
)
from pocket_coffea.lib.columns_manager import ColOut
from pocket_coffea.lib.calibrators.common.common import JetsCalibrator,JetsPtRegressionCalibrator

from workflow_ptregr_check import PtRegrProcessor

from custom_cut_functions import *
import os

localdir = os.path.dirname(os.path.abspath(__file__))

# Creating weights configuration
from pocket_coffea.lib.weights.common import common_weights

# Loading default parameters
from pocket_coffea.parameters import defaults

default_parameters = defaults.get_default_parameters()
defaults.register_configuration_dir("config_dir", localdir + "/params")

parameters = defaults.merge_parameters_from_files(
    default_parameters,
    f"{localdir}/params/object_preselection_run3.yaml",
    f"{localdir}/params/triggers.yaml",
    f"{localdir}/params/jets_calibration_ptregression.yaml",
    update=True,
)


cfg = Configurator(
    parameters=parameters,
    datasets={
        "jsons": ["datasets/datasets_cern.json"],
        "filter": {
            "samples": ["DATA_SingleEle"],
            "samples_exclude": [],
            "year": ["2023_postBPix"],
        },
    },
    workflow=PtRegrProcessor,
    workflow_options={"debug_calibrators": True},
    skim=[],
    preselections=[passthrough],
    categories={
        "baseline": [passthrough],
    },
    weights={
        "common": {
            "inclusive": ["genWeight", "lumi", "XS"],
        },
        "bysample": {},
    },
    # Passing a list of WeightWrapper objects
    weights_classes=common_weights,
    calibrators=[JetsPtRegressionCalibrator,JetsCalibrator],
    variations={
        "weights": {
            "common": {
                "inclusive": [],
            },
            "bysample": {},
        },
        "shape": {
            "common": {
                "inclusive": [],
            },
        },
    },
    variables={
        **count_hist("JetGood"),
    },
    columns={
        "common": {
            "inclusive": [
                ColOut(collection="Jet", columns=["pt", "rawFactor"]),
                ColOut(collection="JetPtReg", columns=["pt","rawFactor"]),
                ColOut(collection="JetPtRegPlusNeutrino", columns=["pt", "rawFactor"]),
            ]
        }
    },
)
