# This config has been generated by the pocket_coffea CLI 0.9.4.
from pocket_coffea.utils.configurator import Configurator
from pocket_coffea.lib.cut_definition import Cut
from pocket_coffea.lib.cut_functions import get_nObj_min, get_HLTsel, get_nPVgood, goldenJson, eventFlags
from pocket_coffea.parameters.cuts import passthrough
from pocket_coffea.parameters.histograms import *

import workflow
from workflow import BasicProcessor

# Register custom modules in cloudpickle to propagate them to dask workers
import cloudpickle
cloudpickle.register_pickle_by_value(workflow)


import os
localdir = os.path.dirname(os.path.abspath(__file__))

# Creating weights configuration
from pocket_coffea.lib.weights.common import common_weights

from pocket_coffea.lib.weights.weights import WeightLambda
import numpy as np

# Loading default parameters
from pocket_coffea.parameters import defaults
default_parameters = defaults.get_default_parameters()
defaults.register_configuration_dir("config_dir", localdir+"/params")

parameters = defaults.merge_parameters_from_files(default_parameters,
                                                    f"{localdir}/params/object_preselection.yaml",
                                                    f"{localdir}/params/triggers.yaml",
                                                   update=True)



even_event = Cut(
    name="even_event",
    function=lambda events, params, **kwargs: events.event % 2 == 0,
    params={}
)

odd_event = Cut(
    name="odd_event",
    function=lambda events, params, **kwargs: events.event % 2 == 1,
    params={}
)

def parity_weight_fn(params, metadata, events, size, shape_variations):
    weight = np.where(events["parity"] >= 0, 1.0, 0.0)
    return (np.ones_like(weight), weight, weight)

parity_weight = WeightLambda.wrap_func(
    name="parity_weight",
    function=parity_weight_fn,
    has_variations=True
)


cfg = Configurator(
    parameters = parameters,
    datasets = {
        "jsons": ['datasets/datasets_redirector.json'],
        "filter" : {
            "samples": ['TTTo2L2Nu'],
            "samples_exclude" : [],
            "year": ['2018']
        }
    },

    workflow = BasicProcessor,

    skim = [get_nPVgood(1), eventFlags, goldenJson], 

    preselections = [passthrough],
    categories = {
        "baseline": [passthrough],
        "2jets_even": [get_nObj_min(2, coll="JetGood"), even_event],
        "2jets_odd": [get_nObj_min(2, coll="JetGood"), odd_event],
    },

    weights = {
        "common": {
            "inclusive": ["genWeight","lumi","XS", "parity_weight"],

       },
    },
    # Passing a list of WeightWrapper objects
    weights_classes = common_weights + [parity_weight],

    variations = {
        "weights": {
            "common": {"inclusive": ["parity_weight"]},
        },
        "shape": {
            "common": {"inclusive": ["jet_calibration"]},
        }
    },

    variables = {
        **ele_hists(),
        **jet_hists(),
        **count_hist("JetGood"),
        "Parity": HistConf( [Axis(field="parity", bins=3, start=-1, stop=2, label=r"Parity")], variations=True),
    },

    columns = {
        

    },
)
